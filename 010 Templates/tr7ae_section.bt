local uint SectionInfoSize<hidden=true>;

enum <ubyte> SectionType
{
	SECTION_GENERAL = 0x0,
	SECTION_EMPTY = 0x1,
	SECTION_ANIMATION = 0x2,
	SECTION_PUSHBUFFER_WC = 0x3,
	SECTION_PUSHBUFFER = 0x4,
	SECTION_TEXTURE = 0x5,
	SECTION_WAVE = 0x6,
	SECTION_DTPDATA = 0x7,
	SECTION_SCRIPT = 0x8,
	SECTION_SHADERLIB = 0x9,
	NUM_SECTION_TYPES = 0xA,
};

enum <uint16> RelocationType
{
    POINTER,
    RESOURCE_ID,
    RESOURCE_ID16,
    RESOURCE_POINTER
};

const struct
{
	char magic[4];
	int size;
	SectionType type;
	byte skip : 1;
	byte __free : 7;
	uint16 versionID;
	union {
		struct
        {
			uint32 hasDebugInfo : 1;
			uint32 resourceType : 7;
			uint32 numRelocations : 24;
		} packed;
		uint packedAsInt;
	} PackedData;
	int id;
	uint specMask;
	if (PackedData.packed.numRelocations > 0) {
		struct
        {
			struct
            {
				RelocationType type : 3;
				uint16 sectionIndexOrType : 13;
			} typeAndSectionInfo;
			int16 typeSpecific;
			uint32 offset;
		} Relocations[PackedData.packed.numRelocations]<read=Str("section %u, offset %u, type %u", typeAndSectionInfo.sectionIndexOrType, offset, typeAndSectionInfo.type)>;
	}
	SectionInfoSize = (PackedData.packed.numRelocations * 0x8) + 0x18;
} SectionInfo;