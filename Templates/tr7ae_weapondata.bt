typedef byte TYPE <read=TYPEread, write=TYPEwrite>;
    string TYPEread(TYPE type) {
        switch (type) {
            case 0: 
                return "General";
            case 1: 
                return "Empty";
            case 2: 
                return "Animation";
            case 3: 
                return "Pushbuffer_WC";
            case 4: 
                return "Pushbuffer";
            case 5: 
                return "Texture";
            case 6: 
                return "Sound";
            case 7: 
                return "DTPData";
            case 8: 
                return "Script";
            case 9: 
                return "ShaderLib";
            case 10: 
                return "CollisionMesh";
            case 11:
                return "Num_Section_Types";
            default: 
                return "Unknown";  
        }
    }
    void TYPEwrite (TYPE &t, string str) {
        t = Atoi(str);
    }

struct {
    uint32 magic; // 0x0
    int32 size; // 0x4
	        TYPE m_type;
    byte _bf5; // 0x9
    uint16 versionID; // 0xa
    //uint32 packedData;
    struct {
        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;        
    } packedData;
    uint32 id;
    uint32 specMask;

} SectionData <fgcolor=cGreen>;

struct {
  struct {
    uint mode;
    float fadeTimer;
    int message;
    struct {
      int16 effectNum;
      char overrideSeg;
      char pad;
      float fxTime;
    } ObjLatentFXList[8];
} ObjState;

  struct {
    float steps;
    float step;
    int force;
    int linkNode;
    struct {
      float rx;
      float ry;
      float rz;
     } InitRot;
    struct {
      float rx;
      float ry;
      float rz;
     } InitPos;
    int16 linkAnim;
    int16 linkAnimMode;
  } GravitateData;

struct {
  int upAxis;
  int flatAxis;
  int topNode;
  float steps;
  float step;
  float length;
  struct {
  
  float X;
  float Y;
  float Z;
  float W;
  
  } startQuat;
  struct {
  
  float X;
  float Y;
  float Z;
  float W;
  
  } destQuat;
  struct {
  
  float X;
  float Y;
  float Z;
  float W;
  
  } norm;
} RealignData;

  int clothList;
  int bulletStrikeHmarkerID;
  int laserSightHmarkerID;
  char bInPickupState;
  char pad[3];
  int mpOwner;
  int mpProjectile;
  ubyte uAmmoClip;
  char padr[3];
  float fProjectileDelay;
  float fDamage;
  int iDamageType;
  struct {
  
  float X;
  float Y;
  float Z;
  float W;
  
  } vTargetPos;
  char iCurrentAnim;
  char useReadyAnimForIdle;
  char bContactDamage;
  char bAltProjectile;
} WeaponData;

