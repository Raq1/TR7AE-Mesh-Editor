typedef byte TYPE <read=TYPEread, write=TYPEwrite>;
    string TYPEread(TYPE type) {
        switch (type) {
            case 0: 
                return "General";
            case 1: 
                return "Empty";
            case 2: 
                return "Animation";
            case 3: 
                return "Pushbuffer_WC";
            case 4: 
                return "Pushbuffer";
            case 5: 
                return "Texture";
            case 6: 
                return "Sound";
            case 7: 
                return "DTPData";
            case 8: 
                return "Script";
            case 9: 
                return "ShaderLib";
            case 10: 
                return "CollisionMesh";
            case 11:
                return "Num_Section_Types";
            default: 
                return "Unknown";  
        }
    }
    void TYPEwrite (TYPE &t, string str) {
        t = Atoi(str);
    }

struct {

  int versionNumber;
  int numSections;

} SectionList;

struct {

    int32 size;
	        TYPE m_type;
    byte pad;
    uint16 versionID;
    struct {

        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;

    } packedData;
    uint32 id;
    uint32 specMask;

} Section[SectionList.numSections] <fgcolor=cLtBlue>;



  FSeek(SectionList.numSections * 20 + 8);
  struct {
    if (Section.packedData.numRelocations > 0) {
      struct {
        struct {
          uint16 type : 3;
          uint16 sectionIndexOrType : 13;
        } typeAndSectionInfo;
        int16 typeSpecific;
        uint32 offset <fgcolor=cRed>;
  } Relocations[Section.packedData.numRelocations] <fgcolor=cGreen>;
  byte Content[Section.size]<optimize=false>;

}

    if (Section.packedData.numRelocations == 0) {
  byte Content[Section.size]<optimize=false>;

}

} SectionContent[SectionList.numSections];