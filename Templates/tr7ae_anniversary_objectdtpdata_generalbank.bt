typedef byte TYPE <read=TYPEread, write=TYPEwrite>;
    string TYPEread(TYPE type) {
        switch (type) {
            case 0: 
                return "General";
            case 1: 
                return "Empty";
            case 2: 
                return "Animation";
            case 3: 
                return "Pushbuffer_WC";
            case 4: 
                return "Pushbuffer";
            case 5: 
                return "Texture";
            case 6: 
                return "Sound";
            case 7: 
                return "DTPData";
            case 8: 
                return "Script";
            case 9: 
                return "ShaderLib";
            case 10: 
                return "CollisionMesh";
            case 11:
                return "Num_Section_Types";
            default: 
                return "Unknown";  
        }
    }
    void TYPEwrite (TYPE &t, string str) {
        t = Atoi(str);
    }

typedef enum <ubyte> {
  kTypeRigid = 0,
  kTypeSkinned = 1,
  kTypeVmoAll = 2,
  kTypeVmoXYZ = 3,
  kTypeVmoRGBA = 4,
  kTypeVmoUV = 5,
  kTypeBend = 6,
  kTypeDummy = 0x1E240,
  kTypeForceDWORD = 0x7FFFFFFF,
} RenderModelDataFlag;

typedef enum <ushort> {
  Double_Sided = 0,
  Single_Sided = 32,
  See_Through_UNCERTAIN = 2086,
  See_Through_UNCERTAIN2 = 42,
  See_Through_UNCERTAIN3 = 38,
  Transparent_Single_Sided = 2087,
  Invisible = 65535,
} Material_Property;

typedef enum <ubyte> {
  Off = 0,
  On = 32,
  Dark_Thing = 60,
} Alpha;

local uint64 i<hidden=true>;
local uint64 v<hidden=true>;
local uint SectionDataSize;
local uint segmentList<hidden=true>;
local uint null<hidden=true>;

null = 235995135;

if ( ReadShort( FTell() ) == 17747 ) {
struct {
    uint32 magic; // 0x0
    int32 size; // 0x4
	        TYPE m_type;
    byte _bf5; // 0x9
    uint16 versionID; // 0xa
    //uint32 packedData;
    struct {
        uint32 hasDebugInfo : 1;
        uint32 resourceType : 7;
        uint32 numRelocations : 24;        
    } packedData;
    uint32 id;
    uint32 specMask;

struct {
    struct {
        uint16 type : 3;
        uint16 sectionIndexOrType : 13;
    } typeAndSectionInfo;
    int16 typeSpecific;
    uint32 offset <fgcolor=cRed>;
} Relocations[packedData.numRelocations];

} SectionData <fgcolor=cGreen>;

local uint32 numRelocations = SectionData.packedData.numRelocations;
Printf("%d\n", numRelocations);
	SectionDataSize = (numRelocations * 0x8) + 0x18;



FSeek(SectionDataSize);

}

struct {

  uint OEDTemplateSelector;
  int m_pAnimBlends;
  int m_pAnimPatterns;
  int TuneDataPtr;
  uint m_numAnimBlends;
  uint m_numAnimPatterns;

  struct {

  int vvIntroDist;
  int vvRemoveDist;
  int introDist;
  int removeDist;
  float maxCheckeeDistance;
  float lod1Dist;
  float lod2Dist;
  ubyte lod1model;
  ubyte lod2model;
  ubyte shadowmodel;
  ubyte lightingOverride;
  float TARGETING_ObjectTargetMaxDistance;
  uint32 ENEMY_CanPickUpAndThrow : 1;
  uint32 INSTANCE_UsesRimLight : 1;
  uint32 ENEMY_Bool_Pad : 30;
  float fGrappleReticleRadius;
  ubyte rimLightIntensity;
  ubyte rimLightColor_0;
  ubyte rimLightColor_1;
  ubyte rimLightColor_2;
  float KnockbackForceOnCollide;

} ObjectHeader;

    FSeek(m_pAnimBlends + SectionDataSize);

  struct {

  int16 animFragment[9];
  uint16 playSpeed;
  uchar playMode;
  uchar blendType;
  uchar rootInterpMode;
  uchar interpFrames;
  uchar startFrame;
  uchar interpOut;
  uchar alphaTable;
  uchar alphaTableOut;
  uchar clothSection;
  char boneSet;
  uchar flags;
  uchar pad[1];

    } pAnimBlends[m_numAnimBlends];

    FSeek(m_pAnimPatterns + SectionDataSize);

  struct {

  int idk;

    } pAnimPatterns[m_numAnimPatterns];

} ObjectDTPData;

    FSeek(ObjectDTPData.TuneDataPtr + SectionDataSize);

struct {

  int serializationInfo;
  int playerObjects;
  int goldPlayerObjects;
  int menuItems;
  int fadeGroupCount;
  int fadeGroupData;
  int chapterCount;
  int chapterList;
  int levelCount;
  int levelList;
  int keyboardLocals;
  int menuPositionsPS2;
  int menuPositionsXBox;
  int menuPositionsPC;
  float automaticInstanceRemovalFloor;
  int hardCodedHints;
  int titleScreen;
  int numDarkChronicles;
  int darkChronicleList;
  int unlockableTable;
  uint16 costumeChangeEventVar;
  uint16 samplerDemoEventVar;
  int actionNames;
  int attractMovieCount;
  int attractMovies;
  int styleUnitsCount;
  int styleUnitPtr;
  int playerLights;
  int inventoryLights;
  int cameraDefaults;
  int wetDripDefaults;
  int superActionDefaults;
  int goldFX;
  int inputconfigs;
  int fontList;
  int gameDifficulty;
  float percentCompleteRatio;
  int soundGroupCountOBSOLETE;
  int soundGroupOBSOLETE;
  int soundGroupAssignmentsOBSOLETE;
  struct {
    float targetLoZRadius;
    float targetHiZRadius;
    float maxTargetXYRadius;
  } GlobalMarkupTuneData;

  struct {
  char bLiveUpdate;
  char pad[3];
  ubyte RedCurve[256];
  ubyte GreenCurve[256];
  ubyte BlueCurve[256];
  } xboxGammaCurve;

  FSkip(144);

  float multifocusBlur;
  int16 torsoBossObjectID;
  int16 doppelgangerObjectID;
  int16 doppelgunObjectID;
  int16 ghostObjectID;
  int16 pspNumBronzeRewards;
  int16 pspNumSilverRewards;
  int16 pspNumGoldRewards;
  int16 pspMasterSystemDefaultTimes[11];
  int16 pspRaidNSeekSeekPoints[3];
  int useCameraAntics;

} GlobalInfo;

    FSeek(GlobalInfo.playerObjects + SectionDataSize);

  struct {
    int16 numPlayerObjects;
    int16 playerObjectList[numPlayerObjects];
  } PlayerObjects;

    FSeek(GlobalInfo.goldPlayerObjects + SectionDataSize);

  struct {
    int16 numgoldPlayerObjects;
    int16 goldPlayerObjectList[numgoldPlayerObjects];
  } goldPlayerObjects;

  /*struct {

    FSeek(GlobalInfo.menuItems + SectionDataSize);

    int16 accessing_card;
    int16 accessing_card_pal;
    int16 animatics;
    int16 anisotropic_filtering;
    int16 antialias_disabled;
    int16 antialias_enabled;
    int16 antialiasing_fsaa;
    int16 bilinear_filtering;
    int16 bitdepth;
    int16 brightness;
    int16 button;
    int16 cancel;
    int16 can_autosave;
    int16 card_full;
    int16 card_not_enough_blocks;
    int16 chapter;
    int16 choose_load_file;
    int16 choose_load_file_xbox;
    int16 choose_save_file;
    int16 choose_save_file_xbox;
    int16 configure;
    int16 configure_buttonmapping;
    int16 configure_joystick;
    int16 configure_keyboard;
    int16 configure_mouse;
    int16 cont;
    int16 continue_game;
    int16 controller_options;
    int16 controller_removed_xbox;
    int16 create_file;
    int16 create_file_xbox;
    int16 creative_tech;
    int16 data_corrupt_xbox;
    int16 data_corrupt_xbox2;
    int16 demos;
    int16 directx_required;
    int16 disk_error_xbox;
    int16 overwritting_game;
    int16 overwritting_game_pal;
    int16 done;
    int16 exit_demo;
    int16 extras;
    int16 format_card;
    int16 format_failed;
    int16 formatting;
    int16 formatting_pal;
    int16 game_options;
    int16 gamepad;
    int16 gamma;
    int16 go_back;
    int16 backx;
    int16 graphic_options;
    int16 hd_full_xbox;
    int16 height;
    int16 hints_off;
    int16 hints_on;
    int16 insert_card_free;
    int16 invert_mouse_off;
    int16 invert_mouse_on;
    int16 keyboard;
    int16 load_failed;
    int16 load_game;
    int16 loading;
    int16 loading_data;
    int16 loading_data_pal;
    int16 low_quality_text;
    int16 max_games;
    int16 mouse;
    int16 mouse_sensitivity;
    int16 music;
    int16 music_off;
    int16 music_on;
    int16 no;
    int16 no_card;
    int16 no_filtering;
    int16 not_enough_blocks;
    int16 ok;
    int16 options;
    int16 overwrite_game;
    int16 overwrite_only;
    int16 page;
    int16 paused;
    int16 pc_display_mode;
    int16 pc_error;
    int16 pc_press_action_button;
    int16 pc_select_action;
    int16 pc_warning_check_on_cd;
    int16 pc_warning_reset;
    int16 press_start;
    int16 query_format_card;
    int16 query_overwrite;
    int16 query_overwrite_xbox;
    int16 query_quit;
    int16 query_quit_xbox;
    int16 quit_game;
    int16 refresh_rate;
    int16 resolution;
    int16 resume_game;
    int16 reset;
    int16 save;
    int16 save_a;
    int16 save_b;
    int16 save_c;
    int16 save_d;
    int16 save_e;
    int16 save_failed;
    int16 overwrite_failed;
    int16 save_failed_xbox;
    int16 save_game;
    int16 save_ok;
    int16 overwrite_ok;
    int16 saving;
    int16 saving_pal;
    int16 cancel_save;
    int16 cancel_load;
    int16 select_config;
    int16 select_rendering_device;
    int16 select_resdepth;
    int16 setup_cap;
    int16 sharpness;
    int16 skip_cinematic;
    int16 sound;
    int16 sound_off;
    int16 sound_on;
    int16 sound_options;
    int16 sres;
    int16 start_game;
    int16 start_new_game;
    int16 sync_to_refresh;
    int16 trilinear_filtering;
    int16 triple_buffering;
    int16 unformatted_card;
    int16 vibration_off;
    int16 vibration_on;
    int16 voice;
    int16 volume;
    int16 vres;
    int16 warning_one;
    int16 width;
    int16 yes;
    int16 modal_hint_prompt;
    int16 query_hint_prompt;
    int16 subtitle_off;
    int16 subtitle_on;
    int16 subtitle_english;
    int16 subtitle_french;
    int16 subtitle_italian;
    int16 subtitle_german;
    int16 subtitle_spanish;
    int16 dark_diary;
    int16 next_page;
    int16 prev_page;
    int16 boot_full_warning;
    int16 empty_save;
    int16 load_successful;
    int16 load_game_cant_title;
    int16 load_game_unformatted;
    int16 load_game_nocard;
    int16 load_game_nogames;
    int16 load_game_nodata;
    int16 format_successful;
    int16 dataloss_xbox;
    int16 dataloss_pc;
    int16 display_mode_not_supported;
    int16 sres_countdown_msg;
    int16 dialogEmptyString;
    int16 dialogDefaultAcceptBtn;
    int16 dialogDefaultBackBtn;
    int16 dialogProgressiveTitle;
    int16 dialogProgressiveWarnText;
    int16 dialogProgressiveKeepText;
    int16 dialogPAL60Title;
    int16 dialogPAL60WarnText;
    int16 dialogPAL60KeepText;
    int16 dialogTimeTrialTitle;
    int16 dialogTimeTrialFailText;
    int16 dialogTimeTrialHintText;
    int16 dialogCostumeHintText;
    int16 fullscreen_effects_disabled;
    int16 sun_effects_enabled;
    int16 sun_effects_disabled;
    int16 out_of_diskspace;
    int16 overwrite_pc;
    int16 fx_options;
    int16 write_error_pc;
    int16 fullscreen_effects;
    int16 shadows;
    int16 sun_effects;
    int16 enabled;
    int16 disabled;
    int16 gamepad_second_axis;
    int16 gamepad_type;
    int16 analogue;
    int16 digital;
    int16 flipped;
    int16 sync_disabled;
    int16 sync_enabled;
    int16 triple_buffer;
    int16 double_buffer;
    int16 restore_defaults;
    int16 controller_defaults;
    int16 graphics_defaults;
    int16 move;
    int16 select_successful;
    int16 select_failed;
    int16 deleting_profile;
    int16 deleting_profile_pal;
    int16 new_account;
    int16 title_new_account;
    int16 text_new_account;
    int16 title_servers_too_busy;
    int16 text_servers_too_busy;
    int16 title_update_required;
    int16 text_update_required;
    int16 title_management_required;
    int16 text_management_required;
    int16 title_message_waiting;
    int16 text_message_waiting;
    int16 title_network_trouble;
    int16 text_network_trouble;
    int16 retrieving_friends;
    int16 text_block_friend;
    int16 text_remove_friend;
    int16 no_friends;
    int16 retrieving_offerings;
    int16 no_offerings;
    int16 num_blocks;
    int16 title_download_again;
    int16 text_download_again;
    int16 title_not_enough_space;
    int16 text_not_enough_space;
    int16 text_game_invitation;
    int16 text_kicked_by_duplicate_logon;
    int16 text_connection_lost;
    int16 overwrite_savegame;
    int16 not_enough_space_can_overwrite;
    int16 max_saves_reached;
    int16 not_enough_space_for_save;
    int16 boot_to_dash;
    int16 continue_;
    int16 continue_without_saving;
    int16 continue_without_using_harddisk;
    int16 broken_playerdata;
    int16 fix_playerdata;
    int16 try_again;
    int16 not_enough_space_for_playerdata;
    int16 create_new_savegame;
    int16 create_new_profile;
    int16 delete_savegame;
    int16 delete_profile;
    int16 lose_progress;
    int16 lose_progress_in_game;
    int16 lose_progress_new_game;
    int16 default_profile_name;
    int16 profile_name;
    int16 default_savegame_name;
    int16 create_default_profile_failed;
    int16 load_default_profile_failed;
    int16 create_profile_failed;
    int16 load_profile_failed;
    int16 broken_autosave;
    int16 cannot_delete_active_profile;
    int16 overwrite_profile;
    int16 overwrite_savegame2;
    int16 pda;
    int16 display_hud;
    int16 combat_lock;
    int16 health_pack;
    int16 large_health_pack;
    int16 prev_weapon;
    int16 next_weapon;
    int16 binoculars;
    int16 pause;
    int16 shoot;
    int16 interact;
    int16 crouch;
    int16 jump;
    int16 grapple;
    int16 manual_aim;
    int16 manual_grab;
    int16 rotate_camera;
    int16 up;
    int16 down;
    int16 left;
    int16 right;
    int16 sneak;
    int16 walk;
    int16 leftmouse;
    int16 rightmouse;
    int16 middlemouse;
    int16 delete_button;
    int16 delete_failed;
    int16 delete_save;
    int16 delete_successful;
    int16 load_lose_progress;
    int16 save_empty_slot;
    int16 save_no_space;
    int16 save_overwrite;
    int16 save_successful;
    int16 selector_continue_nosave;
    int16 selector_continue_nosigin;
    int16 selector_return;
    int16 selector_show_device;
    int16 selector_signin;
    int16 signin_active;
    int16 signin_changed;
    int16 signin_inactive;
    int16 signin_message;
    int16 storagedevice_none;
    int16 storagedevice_nosignin;
    int16 storagedevice_unavailable;
    int16 psp_you_have_been_invited;
    int16 psp_you_win;
    int16 psp_you_lose;
    int16 psp_you_draw;
    int16 psp_welcome_master_system_h2h;
    int16 psp_welcome_master_system_single;
    int16 psp_welcome_treasure_hunt_h2h;
    int16 psp_welcome_treasure_hunt_single;
    int16 psp_welcome_raid_n_seek_h2h;
    int16 psp_welcome_raid_n_seek_hide;
    int16 psp_welcome_raid_n_seek_seek;
    int16 psp_welcome_raid_n_seek_found;
    int16 psp_level;
    int16 psp_time_played;
    int16 psp_time_format_hhmmss;
    int16 psp_complete;
    int16 psp_format_percent;
    int16 psp_title;
    int16 psp_save_slot;
    int16 psp_save_game_title;
    int16 psp_empty_save_game;
    int16 psp_pref_title;
    int16 psp_pref_detail;
    int16 psp_tt_save_title;
    int16 psp_tt_waiting;
    int16 ngc_disc_cover_open;
    int16 ngc_disc_fatal_error;
    int16 ngc_disc_no_disc;
    int16 ngc_disc_retry_error;
    int16 ngc_disc_wrong_game_disc;
    int16 nextgen_dialog_text;
    int16 pad360_x;
    int16 pad360_y;
    int16 pad360_a;
    int16 pad360_b;
    int16 pad360_ltrigger;
    int16 pad360_rtrigger;
    int16 pad360_lshoulder;
    int16 pad360_rshoulder;
    int16 pad360_lstick;
    int16 pad360_rstick;
    int16 pad360_start;
    int16 pad360_back;
    int16 pad360_dpadup;
    int16 pad360_dpaddown;
    int16 pad360_dpadleft;
    int16 pad360_dpadright;
    int16 pad360_lstickx;
    int16 pad360_lsticky;
    int16 pad360_rstickx;
    int16 pad360_rsticky;
  } menuItems;*/

    FSeek(GlobalInfo.titleScreen + SectionDataSize);

  struct {

    char musicName[20];
    int numUnits;
    int unitList;

      FSeek(unitList + SectionDataSize);

      struct {

          float cameraHeight;
          float cameraX;
          float cameraY;
          char unitName[16];
          char playerName[32];
          float PlayerX;
          float PlayerY;
          float PlayerZ;
          float PlayerRotation;
          float PlayerRotX;
          float PlayerRotY;
          float CameraXRot;
          float CameraYRot;
          float CameraZRot;
          float CameraXRotSpeed;
          float CameraYRotSpeed;
          float CameraZRotSpeed;
          float CameraProjection;
          ushort RainAmount;
          ushort SnowAmount;
          int playerTitleLights;

    } TitleUnit[numUnits];
  } titleScreen;

    FSeek(GlobalInfo.menuPositionsPS2 + SectionDataSize);

  struct {
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } main;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } pause;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } extras;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } options;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } save;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } load;
} MenuPositionsPS2;

    FSeek(GlobalInfo.menuPositionsXBox + SectionDataSize);

  struct {
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } main;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } pause;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } extras;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } options;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } save;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } load;
  } MenuPositionsXBox;

    FSeek(GlobalInfo.menuPositionsPC + SectionDataSize);

  struct {
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } main;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } pause;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } extras;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } options;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } save;
    struct {
    char lineSkip;
    char itemSkip;
    char center;
    char border;
    float x;
    float y;
    float width;
  } load;
  } MenuPositionsPC;

    FSeek(GlobalInfo.hardCodedHints + SectionDataSize);

  struct {
    int16 collectibleHintRange;
    int16 collectibleHintTop;
    int16 collectibleHintBottom;
    int16 longNonModelHintTime;
    int16 pad;
    int16 numHints;
    int16 hints[5];
  } HardcodedHints;

    FSeek(GlobalInfo.fadeGroupData + SectionDataSize);

  struct {
    int FadeGroupList[GlobalInfo.fadeGroupCount];
  } fadeGroups;

    FSeek(GlobalInfo.keyboardLocals + SectionDataSize);

  struct {
    int idk;
  } keyboardLocals;

    FSeek(GlobalInfo.cameraDefaults + SectionDataSize);

  struct {
    float auto_center_multiplier;
    float auto_center_max_speed;
    float rightstick_auto_center_disable_frames;
    float rightstick_auto_center_disable_return;
    float lead_amount;
    float vertical_bias;
    float focus_height;
    float zoomed_in_focus_height;
    float focus_height_combat;
    float high_distance;
    float medium_distance;
    float zero_distance;
    float low_distance;
    float high_tilt_angle;
    float medium_tilt_angle;
    float zero_tilt_angle;
    float low_tilt_angle;
    float high_stop_tilt_adjust_speed;
    float high_tilt_adjust_speed;
    float med_tilt_adjust_speed;
    float zero_tilt_adjust_speed;
    float low_tilt_adjust_speed;
    float low_stop_tilt_adjust_speed;
    float spring_degree_upper;
    float spring_degree_lower;
    float toward_dead_zone_start;
    float toward_dead_zone_end;
    float close_distance_dead;
    float close_min_distance_dead;
    float away_dead_zone_start;
    float away_dead_zone_end;
    float dead_to_dead_mult;
    float dead_to_dead_start;
    float combat_camera_distance;
    float combat_camera_zoffset;
    float combat_camera_vbias;
    float combat_camera_tilt;
    float combat_camera_rotspeed;
    float combat_camera_rotdamp;
    float combat_camera_rotation_offset;
    float combat_camera_melee_rotation_offset;
    float max_binoc_width;
    float min_binoc_width;
    float binoc_max_speed;
    float binoc_acc;
    float binoc_start_blur;
    float binoc_min_blur;
    float binoc_max_blur;
    float binoc_blur_adjust;
    int globalDefaultCamera;
    int turretCamera;
    int ropeCamera;
    int ledgeCamera;
    int thrownCamera;
    int horizPoleCamera;
    int vertPoleCamera;
    int ladderCamera;
    int vehicleCamera;
    int ziplineCamera;
    int crawlCamera;
    int pushPullCamera;
    int skydiveCamera;
    int swimTreadCamera;
    int swimCamera;
    int idleCamera;
    int deathCamera;
  } cameraDefaults;

    FSeek(GlobalInfo.inputconfigs + SectionDataSize);

  struct {
  char datPointer[4];
  } inputconfigs;

    FSeek(GlobalInfo.wetDripDefaults + SectionDataSize);

  struct {
    float DripAcceleration;
    float DripVelocity;
    float MinSize;
    float SizeCameraDistanceDivide;
    float MaxSize;
    int DripBeginTime;
    int DripActiveTime;
    int DripPctMax;
    int DripParticleLifeTime;
    uint DripStartColor;
    uint DripEndColor;
  } wetDripDefaults;

    FSeek(GlobalInfo.superActionDefaults + SectionDataSize);

  struct {
    uint16 screenZ;
    uint16 pad;
  } superActionDefaults;

    FSeek(GlobalInfo.gameDifficulty + SectionDataSize);

  struct {
    float enemyAccuracyMult;
    float ememyDamageMult;
    float healthInitMult;
    float healthDecreaseMult;
    float healthPackDropMult;
    float savingGrabTime;
  } gameDifficulty;