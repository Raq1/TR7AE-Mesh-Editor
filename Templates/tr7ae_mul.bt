typedef enum {

  kSoundPacket = 0x0,
  kCinematicPacket = 0x1,
  kPaddingPacket = 0x2,

} PacketType;

struct {
  int hertz;
  int startLoop;
  int endLoop;
  int channelCount;
  int reverbVol;
  int startSizeToLoad;
  int partialLoop;
  int loopAreaSize;
  int hasCinematic;
  int hasSubtitles;
  int loopStartFileOffset;
  int loopStartBundleOffset;
  int maxEEBytesPerRead;
  float mediaLength;
  float volLeft[12];
  float volRight[12];
  unsigned int loopStartSamplesToSkip[12];
  int cutsceneTime;
} STRHEADER;

FSeek(2048);

struct {

  PacketType type;
  int len;
  char pad[8];

} PacketHeader;

FSeek(2068);

struct {

  char enabled;
  char paused;
  char scriptMessageEnabled;
  char syncToCinematic;
  int cinematicHandle;
  char cinematicName[50];
  FSkip(2);
  float cinematicStartTime;
  float cinematicLength;
  char extrasCinePending;
  FSkip(3);
  int unitID;
  int triggerID;

} CDCCineGlobal;

struct {

  int m_unitID;
  int16 m_load;
  int16 m_cameraControl;
  int16 m_channels;
  int16 m_positionsAfterPlayback;
  int m_endTriggerID;
  uint m_pDataPointer;
  int m_dataSize;
  char m_pCinematic;
} CinematicCineCommand;

FSeek(9248);

struct {
  uchar mEERingBuffer;
  FSkip(3);
  int mEERingBufferSize;
  int mEERingBufferMask;
  int mEERingBufferPlayOffset;
  int mEERingBufferWriteOffsetLowerLimit;
  int mEERingBufferWriteOffsetUpperLimit;
  int mMainUnitID;
  int mNumIntros;
  int mIntroTableOffset;
  int mFrame;
  int mFrameSize;
  char mFirstFrame;
  FSkip(3);
  int mAnchorCount;
  int mSkeletonCount;
  int mCameraCount;
  int mCameraChannel[8];
  int mCurrentCameraChannel;
  int mTriggerCount;
  int mTriggerUnitID;
  float mFov;

   struct {
		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

   } mCinematicToUnitTransform;

  char mIsCinematicToUnitTransformIdentity;
  FSkip(3);
  int mHeaderSize;
  char mHeaderValid;
  FSkip(3);
  int mFloatChannelCount;
  float mInterFrameWeight;
  char mIsRunning;
  FSkip(3);
  int mCameraUnitId;
  char mSavedSoulReaverNoDraw;
  char mIsPlayerHidden;
  char m_cameraControl;
  char m_restorePositions;
  int m_endTriggerID;
  uint m_pBufferPointer;
  int m_postHeaderOffset;

} CinematicHandlerImpl;

FSeek(9308);

struct {

  int instanceID;
  int boneCount;
  int channel;

   struct {

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

   } BoneDefault;
  int currentCloth;
  int savedRootMatrix;
  int cineBone;
  int instance;
  char destroyWhenDone;
  char savedNoCollide;
  FSkip(2);
  int syncCloth;
  char clothWaitingForAnimation;
  FSkip(3);

   struct {

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

   } position;
  int savedStreamingUnitID;
   struct {

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

   } endPosition;
   struct {

		float maxXPos;
		float maxZPos;
		float maxYPos;
        uint maxWPos;

   } endOrientation;
  uint finalUnitID;
  int clothIndices;
} CinematicHandlerImplSkeleton;
