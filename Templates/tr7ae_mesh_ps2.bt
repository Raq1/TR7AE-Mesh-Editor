#include "tr7ae_section.bt"

typedef enum <ubyte> {
  kTypeRigid = 0,
  kTypeSkinned = 1,
  kTypeVmoAll = 2,
  kTypeVmoXYZ = 3,
  kTypeVmoRGBA = 4,
  kTypeVmoUV = 5,
  kTypeBend = 6,
  kTypeDummy = 0x1E240,
  kTypeForceDWORD = 0x7FFFFFFF,
} RenderModelDataFlag;

typedef struct
{
	float x;
	float y;
	float z;
	float w;
} Vector <read=Str("%f, %f, %f", x, y, z)>;

local uint64 i<hidden=true>;

struct {
	int version;
	int numSegments;
	int numVirtSegments;
	uint segmentList;
	local int offsetsegmentlist = FTell();
	if (numSegments > 0) {
		FSeek(segmentList + SectionInfoSize);
		for (i=0; i<numSegments; i++);
			struct {
				Vector pivot;
				int flags;
				int16 firstVertex;
				int16 lastVertex;
				int parent;
				uint hInfo;
                local int offsethinfo = FTell();
			} Segment[numSegments]<read=Str("%f, %f, %f, %u", pivot.x, pivot.y, pivot.z, hInfo), optimize=false>;
		}
		if (numVirtSegments > 0) {
			struct {
				Vector pivot;
				int flags;
				int16 firstVertex;
				int16 lastVertex;
				int16 index;
				int16 weightIndex;
				float weight;
			} VirtSegment[numVirtSegments]<read=Str("%f, %f, %f", pivot.x, pivot.y, pivot.z)>;
		}
	FSeek(offsetsegmentlist);
	struct {
		float x;
		float y;
		float z;
		float w;
	} modelScale;
	int numVertices;
	uint vertexList;
	local int offsetvertexlist = FTell();
	if (numVertices > 0) {
		FSeek(vertexList + SectionInfoSize);
		struct {
			struct {
				int16 x;
				int16 y;
				int16 z;
			}vertex<read=Str("%i, %i, %i", x, y, z)>;
			char nx;
			char ny;
		} MVertex[numVertices]<read=Str("pos %i, %i, %i", vertex.x, vertex.y, vertex.z)>;
	}
	FSeek(offsetvertexlist);
	int numNormals;
	uint normalList;
	int numFaces;
	uint faceList;
	local int offsetfacelist = FTell();
	if (numFaces > 0) {
		FSeek(faceList + SectionInfoSize);
		if ( ReadShort( FTell() ) != 0 ) {
		struct {
			ushort StripIndexInfo[numFaces * 4];
		} faceInfo;
	}
}
	FSeek(offsetfacelist);
	uint OBSOLETEaniTextures;
	float maxRad;
	float maxRadSq;
	uint OBSOLETEstartTextures;
	uint OBSOLETEendTextures;
	uint animatedListInfo;
	uint animatedInfo;
	uint scrollInfo;
	uint textureStripInfo;
	local int offsettexturestripinfo = FTell();
		FSeek(textureStripInfo + SectionInfoSize);
		if ( ReadShort( FTell() ) != 0 ) {
		struct {
					int16 vertexCount;
					int16 drawGroup;
					union {
						struct {
							uint texture: 13;
							uint blendValue: 4;
							uint unk1: 4;
							uint singleSided: 1;
							uint unk2: 10;	
						} flags;
					int tpageid;
					} tpageid;
					float sortPush;
					float scrollOffset;
					uint nextTexture;
                    int unk1;
                    int unk2;
                    int unk3;
		} TextureStripInfo[1];
}
	FSeek(offsettexturestripinfo);
	uint envMappedVertices;
	uint eyeRefEnvMappedVertices;
	uint materialVertexColors;
	uint spectralVertexColors;
	int16 pnShadowFaces;
	FSkip(2);
	int16 pnShadowEdges;
	FSkip(2);
	uint boneMirrorData;
	local int offsetbonemirrordata = FTell();
	if (boneMirrorData > 0) {
		FSeek(boneMirrorData + SectionInfoSize);
		struct {
            while (true) {
				struct {
			        ubyte bone1;
			        ubyte bone2;
			        ubyte count;
                } BoneMirrorData;
                    if ( ReadShort( FTell() ) == 0 ) 
					    break;
		    }
	    } BoneMirrorData;
    }
	FSeek(offsetbonemirrordata);
	uint drawgroupCenterList;
	local int offsetdrawgroupcenterlist = FTell();
	if (drawgroupCenterList > 0) {
		FSeek(drawgroupCenterList + SectionInfoSize);
		struct {
			int16 x;
			int16 y;
			int16 z;
			int16 pad;
		} DrawgroupCenterList;
	}
	FSeek(offsetdrawgroupcenterlist);
	int numMarkUps;
	uint markUpList;
	int numTargets;
	uint targetList;
	uint cdcRenderDataID;
	uint cdcRenderModelData;
	FSkip(12);
} Model;